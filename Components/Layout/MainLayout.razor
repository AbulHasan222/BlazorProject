
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JS


<AuthorizeView>
    <Authorized>

        <NavMenu />
        <SideMenu />

        <div class="home-section">
            <!-- Layout page -->
            <div class="layout-page">

                <div class="content-wrapper">

                    <div class="container-xxl">

                        @Body

                    </div>
                </div>
            </div>

        </div>

    </Authorized>
    <NotAuthorized>
        <FintechHub.UI.Components.Pages.LandingPage></FintechHub.UI.Components.Pages.LandingPage>
    </NotAuthorized>
</AuthorizeView>



<div class="bs-toast toast toast-placement-ex m-2" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="2000">
    <div class="toast-header">
        <i class='bx bx-bell me-2'></i>
        <div class="me-auto fw-medium">Bootstrap</div>
        <small>11 mins ago</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
        Fruitcake chocolate bar tootsie roll gummies gummies jelly beans cake.
    </div>
</div>
@* 
<div id="main-container" class="home-section">
    <!-- Layout page -->
    <div class="layout-page">

        <div class="content-wrapper">

            <div class="container-xxl">

                @Body

            </div>
        </div>
    </div>
    <!-- / Layout page -->



</div> *@
@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    private string currentPageName = "Home";
    [Parameter]
    public string key { get; set; } = string.Empty;
    protected override void OnInitialized()
    {
        nav.LocationChanged += OnLocationChanged;

        UpdatePageName(nav.Uri); // Initialize the page name based on the current URL
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdatePageName(e.Location);
        InvokeAsync(StateHasChanged); // Refresh the UI
    }

    private void UpdatePageName(string url)
    {


        currentPageName = "Home";

    }

    public void Dispose()
    {
        nav.LocationChanged -= OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await JS.InvokeVoidAsync("custom_Control_Event");

            await JS.InvokeVoidAsync("select2Dropdown");

            await JS.InvokeVoidAsync("fhScrollbar");

            var currentUrl = nav.Uri.ToString();
            var uri = new Uri(nav.Uri);
            var queryParameters = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            if (queryParameters.TryGetValue("user", out var userValue))
            {
                key = UtilityHelper.ConvertToDecrypt(userValue);
            }
            else
            {
                key = await _LocalSession.GetItem("UserName");
            }
            
            var CustomAuthSateProvider = (AuthenticationStateProviderRepo)AuthSateProvider;
            var tokenFromRedis = _distributedCacheManager.GetTokenFromCache(key);
            CustomAuthSateProvider.UpdateAuthenticationState(tokenFromRedis);

            
            if (!string.IsNullOrEmpty(tokenFromRedis))
            {
                var user = (await AuthStat).User;


                //it will be call when redirect another app
                //await ReadLocalStorage();

                if (!user.Identity.IsAuthenticated)
                {
                    nav.NavigateTo(_config["LoginApp"]);
                }
                else
                {
                    await _LocalSession.RemoveItem("accessToken");
                    await _LocalSession.RemoveItem("UserName");



                    await _LocalSession.AddItem("accessToken",tokenFromRedis);
                    await  _LocalSession.AddItem("UserName", user.Identity.Name);



                }
            }
            else
            {
                //nav.NavigateTo("https://localhost:7178/");  another app link
                nav.NavigateTo(_config["LoginApp"]);
            }
            // await _jsruntime.InvokeVoidAsync("popoverEvent");
            // await _jsruntime.InvokeVoidAsync("select2Dropdown");
            // await _jsruntime.InvokeVoidAsync("fhScrollbar");
            base.OnInitialized();
            StateHasChanged();
        }
        else
        {
            var tokenFromRedis = _distributedCacheManager.GetTokenFromCache(key);
            if (tokenFromRedis == null)
            {
                nav.NavigateTo(_config["LoginApp"]);
            }
        }
    }

    private async Task ReadLocalStorage()
    {
        await _LocalSession.RemoveAccessTokenAsync();
        var trsnToken = _distributedCacheManager.GetTokenFromCache("kalam");
        await _LocalSession.SetAccessTokenAsync(trsnToken);

    }
   

}